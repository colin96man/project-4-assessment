{"version":3,"sources":["components/CircleSelector.jsx","components/Circles.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelctor","props","className","circles","map","circle","idx","key","style","backgroundColor","selectedCircleIdx","color","border","onClick","handleSelection","Circles","App","circleIdx","setState","state","getInitialState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UAwBeA,G,MArBO,SAACC,GACnB,OACI,yBAAKC,UAAU,kBACVD,EAAME,QAAQC,KAAI,SAACC,EAAQC,GAAT,OACnB,4BACIC,IAAKF,EACLH,UAAU,wBACVM,MAAO,CACHC,gBAAiBR,EAAMS,oBAAsBJ,EAAM,QAAU,YAC7DK,MAAOV,EAAMS,oBAAsBJ,EAAM,UAAY,QACrDM,OAAQX,EAAMS,oBAAsBJ,EAAM,OAAS,aAEvDO,QAAS,kBAAMZ,EAAMa,gBAAgBR,KAEpCL,EAAMS,oBAAsBJ,EAA5B,iBAA4CL,EAAME,QAAQG,GAA1D,qCAA6FL,EAAME,QAAQG,WCM7GS,G,MApBC,SAACd,GACb,OACI,yBAAKC,UAAU,WACVD,EAAME,QAAQC,KAAI,SAACC,EAAQC,GAAT,OACnB,yBACIC,IAAKF,EACLH,UAAU,cACVM,MAAO,CACHC,gBAAiBR,EAAMS,oBAAsBJ,EAAM,QAAU,UAC7DK,MAAOV,EAAMS,oBAAsBJ,EAAM,YAAc,QACvDM,OAAQX,EAAMS,oBAAsBJ,EAAM,sBAAwB,uBAN1E,UASQL,EAAME,QAAQG,WCX5BH,G,MAAU,CAAC,EAAG,EAAG,EAAG,IAkCXa,E,kDA/Bb,aAAe,IAAD,8BACZ,gBAaFF,gBAAkB,SAACG,GACjB,EAAKC,SAAS,CAACR,kBAAmBO,KAblC,EAAKE,MAAL,2BACK,EAAKC,mBADV,IAEEjB,QAASA,IAJC,E,8DASZ,MAAO,CACLO,kBAAmB,K,+BASrB,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BACA,0BAAMA,UAAU,YACd,kBAAC,EAAD,CAAgBC,QAASA,EAASW,gBAAiBO,KAAKP,gBAAiBJ,kBAAmBW,KAAKF,MAAMT,oBACvG,kBAAC,EAAD,CAASP,QAASA,EAASW,gBAAiBO,KAAKP,gBAAiBJ,kBAAmBW,KAAKF,MAAMT,0B,GAzBxFY,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.31793889.chunk.js","sourcesContent":["import React from 'react';\nimport './CircleSelector.css'\n\nconst CircleSelctor = (props) => {\n    return(\n        <div className=\"CircleSelector\">\n            {props.circles.map((circle, idx) => \n            <button\n                key={circle}\n                className=\"CircleSelector button\"\n                style={{\n                    backgroundColor: props.selectedCircleIdx === idx ? 'white' : 'slateGray',\n                    color: props.selectedCircleIdx === idx ? 'crimson' : 'white',\n                    border: props.selectedCircleIdx === idx ? 'none' : 'slateGray'\n                }}\n                onClick={() => props.handleSelection(idx)}\n            >\n                {props.selectedCircleIdx === idx ? `CIRCLE ${props.circles[idx]} SELECTED` : `SELECT CIRCLE ${props.circles[idx]}`}\n            </button>\n            )}\n        </div>\n    )\n}\n\nexport default CircleSelctor;","import React from 'react';\nimport './Circles.css';\n\nconst Circles = (props) => {\n    return(\n        <div className=\"Circles\">\n            {props.circles.map((circle, idx) => \n            <div\n                key={circle}\n                className=\"Circles div\"\n                style={{\n                    backgroundColor: props.selectedCircleIdx === idx ? 'white' : 'crimson',\n                    color: props.selectedCircleIdx === idx ? 'slategray' : 'white',\n                    border: props.selectedCircleIdx === idx ? '5px solid slategray' : ' 5px solid crimson'\n                }}\n            >\n                {`${props.circles[idx]}`}\n            </div>\n            )}\n        </div>\n    )\n}\n\nexport default Circles;","import React, { Component } from 'react';\nimport CircleSelector from './components/CircleSelector';\nimport Circles from './components/Circles';\nimport './App.css';\n\nconst circles = [1, 2, 3, 4]\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ...this.getInitialState(),\n      circles: circles\n    };\n  }\n\n  getInitialState() {\n    return {\n      selectedCircleIdx: 0\n    }\n  }\n\n  handleSelection = (circleIdx) => {\n    this.setState({selectedCircleIdx: circleIdx});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        <main className=\"App main\">\n          <CircleSelector circles={circles} handleSelection={this.handleSelection} selectedCircleIdx={this.state.selectedCircleIdx} />\n          <Circles circles={circles} handleSelection={this.handleSelection} selectedCircleIdx={this.state.selectedCircleIdx} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}